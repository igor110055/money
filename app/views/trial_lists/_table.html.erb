<%
# 全局化参数
@mine_num_ori = $mine_num # 原有BTC矿机数量
@mine_num_ori_eth = $mine_num_eth # 原有ETH矿机数量
@today = Date.today # 设定今天日期
@diff_acceptable = 0.0002 # 如果实际值与目标值相差在几个BTC以内则视为已达成目标

# 回传已经回本的矿机数量
def cal_mine_backed_num( this_date, back_num = $mine_back_months )
  # 把原有矿机加到计算阵列
  arr = []
  result = []
  arr << "#{$mine_start_date}:#{@mine_num_ori}"
  arr = arr + $mine_buy_dates
  # 开始计算找出购买日期加上回本月数小于当天的矿机树目
  num = 0
  arr.each do |d|
    buy_date = d.split(':')[0].to_date
    buy_num = d.split(':')[1].to_i
    if buy_date + back_num.month <= this_date
      num += buy_num
    end
  end
  return num
end

# 回传尚未回本的矿机数量
def cal_mine_unback_num( this_date, back_num = $mine_back_months )
  # 把原有矿机加到计算阵列
  arr = []
  result = []
  arr << "#{$mine_start_date}:#{@mine_num_ori}"
  arr = arr + $mine_buy_dates
  # 开始计算找出购买日期加上回本月数小于当天的矿机树目
  num = 0
  arr.each do |d|
    buy_date = d.split(':')[0].to_date
    buy_num = d.split(':')[1].to_i
    date_line = ("#{buy_date.year}-#{buy_date.month}-01").to_date
    if date_line <= this_date and buy_date + back_num.month > this_date
      num += buy_num
    end
  end
  return num
end

# 计算新的生活费
def cal_month_cost
  temp = (@month_cost.to_f * (1+$trial_cost_month_grow_rate)).to_i
  if temp >= $trial_cost_month_grow_limit
    @month_cost = (@month_cost.to_f * (1+$trial_cost_month_grow_rate_after_limit)).to_i
  else
    @month_cost = temp
  end
end

# 计算生活费的起始值
def fix_start_month_cost
  if @month_cost_start < @today
    n = (@today-@month_cost_start).to_i/30
    if n >= 1
      (1..n).each do
        cal_month_cost
      end
    end
  end
end

# 计算生活费最大值
def max_month_cost
  if @month_cost < $trial_cost_month_grow_limit
    return $trial_cost_month_grow_limit
  else
    return @month_cost
  end
end

# 计算矿机的购买价格
def cal_mine_cost( btc_price )
  # 每天的挖币产值*新矿机的购买价格是几天的产币价
  ($mine_earn_day*btc_price*@usdt2cny*$mine_price_days).to_i
end

# 判断本期是否已达到比特币增减目标
def reach_btc_amount_goal
  ((@trezor_btc_amount - $trial_btc_amount_goal).abs < @diff_acceptable) or @trezor_btc_amount - $trial_btc_amount_goal > 0
end

# 计算在保底前提下 可贷款的余额上限
def loan_limit_cny
  ($loan_limit_cny - $loan_save_months*$trial_life_month_cost_cny_admin).to_i
end

cal_btc_capital # 初始化月末值
birthday = "1974-12-02".to_date # 设定生日
mine_amount = mine_earn_remain = 0 # 挖矿得到的总币数 | 扣除生活费剩余挖矿币数
total_month_cost_cny = 0 # 每月生活费的总数
twd_to_cny = Currency.new.twd_to_cny # 新台币转人民币
twd_to_btc = Currency.new.twd_to_btc # 新台币转比特币
cny_to_twd = Currency.new.cny_to_twd # 新台币转人民币
total_buy_num = 0 # 新购买矿机总数
# 判断是否显示矿机栏位
have_mine = true if $mine_num > 0 or $mine_buy_dates.size > 0 # BTC矿机
have_mine_eth = true if $mine_num_eth > 0 # ETH矿机
if have_mine or have_mine_eth
  show_mine_td = true
else
  show_mine_td = false
end
show_balance_now = link_to_flow_assets_list(:CNY,twd_to_cny,twd_to_btc) # 缓存至变量节省计算时间

# 自动计算BTC第一期利率到预期的价位
def first_btc_month_grow_rate
  if !$trial_cal_first_rate.empty?
    goal_date = $trial_cal_first_rate.split(':')[0].to_date
    goal_value = $trial_cal_first_rate.split(':')[1].to_f
    months = (goal_date-@today).to_i/30
    beishu = goal_value/@btc_price
    return (beishu**(1.0/months)-1).floor(4)
  else
    return $trial_btc_prices[0].split(':')[0].to_f
  end
end
prices_arr = $trial_btc_prices # 设定BTC价格增长幅度
btc_month_grow_rate = first_btc_month_grow_rate # 初始化BTC价格增长幅度
prices_arr.delete_at(0) # 初始化BTC价格增长幅度
highlight_goal = true # 是否高亮显示已达成目标的月份(有一个月未达成则后面达成也不显示)
jike_balance = Property.tagged_with('矿场').sum {|p| p.amount_to(:btc)} # 极客挖矿余额
huobi_balance = Property.tagged_with(get_huobi_acc_id).sum {|p| p.amount_to(:btc)} # 火币余额
btc_diff_flag = true # 用于一次性显示当月挖矿的收益是否已经达到BTC增减量
fix_start_month_cost # 修正生活费计算的错误
total_mine_sell = 0 # 当月挖矿后立刻卖出的累计收益
mine_income_twd = mine_income_cny = 0 # 挖矿总收益
invest_index = 0 # 用来判断定投金额
invest_remain_cny = ($loan_max_twd*twd_to_cny).to_i + $loan_max_cny
jry_back_base = 300000 # 金如意每三年还本金额(台币)
yn_back = 13625 # 一诺千金第一年领取金额
yn_rate = 1.017 # 一诺千金年还本递增率
trial_cost_from_trezor = false # 是否以冷钱包支付生活费
trial_cost_from_fund = true # 是否以储备资金支付生活费
# 是否开始累计定投贷款金额: 若本月份已执行贷款定投，则试算表第一个月不加入贷款本金
trial_loan_sum_start = $month_invest_already ? false : true
trial_loan_sum_cny = Property.total_loan_lixi(:cny).to_i # 累计试算表的贷款本金初始值
trial_loan_rate = $month_loan_rate # 试算表的月贷款利率
is_over_month_cost = false # 是否已破产
%>
<table width="<%=$default_table_width%>" style="font-size:0.7em">
  <tr class="thead">
    <td>岁</td>
    <td width="85">日期</td>
    <td>月初价</td>
    <td>月初量</td>
    <td>月初值</td>
    <% if $month_invest_load == 1 %>
      <td title="定投目标:储存在数据库里每月投资比特币的金额">定投</td>
    <% else %>
      <td title="定投试算:试算每月投资比特币的金额">定投</td>
    <% end %>
    <td title="每月生活费与矿机的支出&#10;底线表示以冷钱包支付生活费&#10;删除线表示所有资产已无法支付生活费">支出</td>
    <td>月末量</td>
    <td>增减</td>
    <td>增长率</td>
    <td>月末值</td>
    <td>增长值</td>
    <td>月末目标</td>
    <td>目前值</td>
    <td>距离目标</td>
    <td>周目标</td>
    <td>日目标</td>
    <% if have_mine or have_mine_eth # 如果有矿机收益 %>
      <td width="50" title="以月末比特币价格估算的当月挖矿收益">挖矿</td>
    <% end %>
    <td width="50" title="金如意可贷余额+一诺千金可贷余额+金如意还款余额+一诺千金还款余额">储备余额</td>
    <td width="50">本月贷款</td>
    <td width="50">贷款本金</td>
    <td width="40">持仓</td>
    <td width="40">利息</td>
    <td width="40" title="储备余额的可生活月数">月数</td>
    <td width="60" title="月末值+储备余额-利息">可用净值</td>
  </tr>
  <%
  rs_trial.each do |n|
    this_date = @today.at_beginning_of_month+n.month
    account_date = @today.end_of_month+n.month # 挖矿收益结算日
    # month_cost 已加上日期的判断，后面使用该变数无需考虑日期了
    @month_cost = get_month_cost(this_date)
    month_sell = @month_cost/@usdt2cny/@btc_price
    total_month_cost_cny += @month_cost
    begin_price = @btc_price
    fund_note = '' # 储备资产附加讯息
    buy_mine_note = '' # 矿机购买讯息
    sell_mine_note = '' # 卖币讯息
    tr_class = change_row_color # 以高亮显示整列
    mine_cost = cal_mine_cost(begin_price) # 这个月矿机的购买价格
    buy_num_this_month = 0 # 这个月购买矿机几台
    mine_cost_this_date = 0 # 这个月购买矿机所支付的人民币
    mine_earn = 0 # 当月可挖的总币数
    # real_lixi_cny = Property.total_lixi(this_date.end_of_month,:cny).to_i # 目前实际的贷款利息
    goal_price, diff_price, goal_balance, diff_balance, reach_goal_price, month_invest  = check_trial_reached(this_date)
    # 若有输入卖币日期则以高亮显示整列
    $mine_sell_dates.each_index do |i|
      sell_date = $mine_sell_dates[i].split(':')[0]
      if sell_date == this_date.to_s(:db)
        tr_class = change_row_color('#FFCF00','#FFB6C1')
      end
    end
    # 本月贷款总额
    this_month_loan_cny = 0
    # 检查本月是否已支付生活费
    is_pay_month_cost = false
    # 如已破产则则以灰度显示整列
    if is_over_month_cost
      tr_class = change_row_color('#A9A9A9','#696969')
    end
  %>
    <tr <%=tr_class%>>
      <!-- 岁 //-->
      <td align="center"><%= (((this_date-birthday).to_i)/365).to_i %></td>
      <!-- 日期 //-->
      <td align="center"><%= this_date.to_s(:db) %></td>
      <!-- 月初价 //-->
      <% init_btc_price = @btc_price %>
      <td align="right" title="¥<%=btc_to_cny(@btc_price).to_i%>"><%= to_n(@btc_price,0) %></td>
      <!-- 月初量 //-->
      <% begin_amount = @btc_total_amount %>
      <td align="right"><%= to_n(@btc_total_amount,4) %></td>
      <!-- 月初值 //-->
      <%
        begin_balance = @btc_capital
        begin_balance_twd = btc_capital_twd
        begin_balance_cny = (begin_balance_twd*twd_to_cny).to_i
        if $show_value_cur == 'TWD'
          show_begin_balance = begin_balance_twd
        else
          show_begin_balance = begin_balance_cny
        end
      %>
      <td align="right"><%= show_begin_balance %></td>
      <% # 如果有BTC矿机收益 %>
      <%  if have_mine
            # 回本后每月得到的币数会减少
            # 只有开始的头一个月需要判断不满一个月的挖矿，其余默认为月初开始挖矿
            if this_date.year == $mine_start_date.year and this_date.month == $mine_start_date.month
              pass_days = day_diff($mine_start_date,account_date)
            elsif this_date > $mine_start_date
              pass_days = day_diff(this_date,account_date)
            else
              pass_days = 0
            end
            day_unback = $mine_earn_day
            day_backed = day_unback*$mine_back_rate
            # 回传已经回本的矿机数量
            backed_num = cal_mine_backed_num(this_date)
            # 计算尚未回本的矿机数量
            unback_num = $mine_num - backed_num
            # 每天可挖的币数
            day_earn = day_unback*unback_num+day_backed*backed_num
            # 当月可挖的总币数
            mine_earn = day_earn*pass_days
            # 生活费换算成比特币
            month_cost_to_btc = @month_cost/$usdt_to_cny/@btc_price
            # 如果挖出来的币不足以抵扣生活费则以冷钱包的币抵扣
            # if mine_earn - month_cost_to_btc < 0
            # 挖出的币100%存入，以储备资产扣抵生活费
            mine_earn_remain = mine_earn
            # 以挖出来的币抵扣生活费
            # else
            #   mine_earn_remain = mine_earn - month_cost_to_btc
            # end
            # 累加实际能储存的币
            mine_amount += mine_earn_remain if mine_earn_remain > 0
            mine_income_cny = mine_amount*btc_to_cny(@btc_price)
            mine_income_twd = (mine_income_cny*@cny2twd).to_i
            @btc_total_amount += mine_earn_remain
            # 如果价值大于每台矿机价格则自动购入矿机$mine_each_buy台
            $mine_buy_dates.each_index do |i|
              buy_date = $mine_buy_dates[i].split(':')[0]
              buy_num = $mine_buy_dates[i].split(':')[1].to_i
              # 是否以比特币投资，如果大于0为是
              buy_using_btc = $mine_buy_dates[i].split(':')[2].to_i
              # 如果到达购买日则加购
              if buy_date == this_date.to_s(:db)
                if buy_using_btc > 0
                  @btc_total_amount -= (mine_cost/btc_to_cny(@btc_price))*buy_num
                end
                $mine_num += buy_num
                buy_num_this_month = buy_num
                total_buy_num += buy_num
                mine_cost_this_date = (mine_cost*buy_num).to_i
                buy_mine_note = "加购#{buy_num}台, 共¥#{mine_cost_this_date}元"
              end
              # 如果到达停机日则减除
              stop_date = buy_date.to_date + $mine_oprate_months.month
              if this_date == stop_date
                $mine_num -= buy_num
                $mine_buy_dates.delete_at(i)
              end
            end
            # 检查原有矿机是否已经到达停机日
            $mine_end_dates.each_index do |i|
              stop_date = $mine_end_dates[i].split(':')[0].to_date
              stop_num = $mine_end_dates[i].split(':')[1].to_i
              if this_date == stop_date
                $mine_num -= stop_num
                @mine_num_ori = 0
              end
            end
          end
        %>
    <% # 如果有ETH矿机收益 %>
    <%  if have_mine_eth and this_date <= $mine_end_dates_eth
          # 回本后每月得到的币数会减少
          # 只有开始的头一个月需要判断不满一个月的挖矿，其余默认为月初开始挖矿
          if this_date.year == $mine_start_date_eth.year and this_date.month == $mine_start_date_eth.month
            pass_days_eth = day_diff($mine_start_date_eth,account_date)
          elsif this_date > $mine_start_date_eth
            pass_days_eth = day_diff(this_date,account_date)
          else
            pass_days_eth = 0
          end
          day_unback_eth = $mine_earn_day_eth
          day_backed_eth = day_unback_eth*$mine_back_rate
          # 回传已经回本的ETH矿机数量(ETH矿机已全部回本)
          backed_num_eth = $mine_num_eth
          # 计算尚未回本的矿机数量
          unback_num_eth = 0
          # 每天可挖的币数
          day_earn_eth = day_unback_eth*unback_num_eth+day_backed_eth*backed_num_eth
          # 当月可挖的总币数
          mine_earn += day_earn_eth*pass_days_eth
          # 生活费换算成比特币
          month_cost_to_btc = @month_cost/$usdt_to_cny/@btc_price
          # ETH挖矿不抵扣生活费
          mine_earn_remain = mine_earn
          # 累加实际能储存的币
          mine_amount += mine_earn_remain  if mine_earn_remain > 0
          mine_income_cny += mine_amount*btc_to_cny(@btc_price)
          mine_income_twd += (mine_income_cny*@cny2twd).to_i
          @btc_total_amount += mine_earn_remain
        else
          $mine_num_eth = 0
          have_mine_eth = false
        end
      %>
      <% # 计算定投金额 %>
      <%
        this_month_invest_cny = this_month_invest_twd = invest_btc_amount = 0
        this_month_lixi_cny = (trial_loan_sum_cny*trial_loan_rate).to_i # 本月当缴的贷款利息
        this_month_invest_from_plan = $trial_month_invest[invest_index%($trial_month_invest.size)]
        # 日期必须大于开始定投日以及贷款本金小于贷款上限并且储备资金大于0
        if this_date > $trial_month_invest_begin and trial_loan_sum_cny < loan_limit_cny and invest_remain_cny - this_month_invest_from_plan > 0
          # 判断本月定投多少
          if this_date < $trial_month_invest_end
            this_month_invest_cny = this_month_invest_from_plan
          end
          # 如果本月应该定投 + 还有可贷款的余额
          if this_month_invest_cny > 0
            this_month_invest_twd = (this_month_invest_cny*cny_to_twd).to_i
            if trial_loan_sum_cny+this_month_invest_cny < loan_limit_cny
              # 若本月份已执行贷款定投，则试算表第一个月不加入贷款本金
              if trial_loan_sum_start
                invest_btc_amount = this_month_invest_cny/btc_to_cny(@btc_price)
                @btc_total_amount += invest_btc_amount
                invest_remain_cny -= this_month_invest_cny # 剩余可贷款总额减少
                trial_loan_sum_cny += this_month_invest_cny+this_month_lixi_cny # 计算贷款的本金(为了简单采用每月结算利息)
              else
                trial_loan_sum_start = true
              end
              fund_note += "贷款定投-¥#{this_month_invest_cny}" if this_month_invest_cny > 0
              this_month_loan_cny += this_month_invest_cny
              invest_index += 1
            else
              trial_loan_sum_cny += this_month_lixi_cny if trial_loan_sum_start
              this_month_invest_cny = 0
            end
          end
        elsif trial_loan_sum_start and (trial_loan_sum_cny > 0)
            trial_loan_sum_cny += this_month_lixi_cny
        end
        if $show_value_cur == 'TWD'
          show_this_month_invest = this_month_invest_twd
        else
          show_this_month_invest = this_month_invest_cny
        end
      %>
      <% if $month_invest_load == 1 %>
        <!-- 定投目标 //-->
        <td align="right" class="balance_now">
          <%
            if $show_value_cur == 'TWD'
              show_month_invest_plan = (month_invest*cny_to_twd).to_i
            else
              show_month_invest_plan = month_invest
            end
          %>
          <%= show_month_invest_plan %>
        </td>
      <% else %>
        <!-- 定投试算 //-->
        <td align="right">
          <span title="<%=this_month_invest_twd%> ¥<%=this_month_invest_cny%> ฿<%=invest_btc_amount.floor(5)%>"><%= show_this_month_invest %></span>
        </td>
      <% end %>
      <!-- 支出 //-->
      <td align="right">
        <% if this_date > @month_cost_start %>
          <!-- 加底线表示以冷钱包支付生活费 //-->
          <%
            if trial_cost_from_trezor and (@btc_total_amount - month_sell > 0) # 扣除生活费
              @btc_total_amount -= month_sell
              fund_note += "以币生活-฿#{month_sell.floor(6)}"
              is_pay_month_cost = true
            else
              trial_cost_from_trezor = false
              trial_cost_from_fund = true
            end
            cost_str = (@month_cost+mine_cost_this_date).to_i
            # 按币别显示
            if $show_value_cur == 'TWD'
              show_cost_str = (cost_str*cny_to_twd).to_i
            else
              show_cost_str = cost_str
            end
            show_cost_str = raw("<u>#{show_cost_str}</u>") if trial_cost_from_trezor
           %>
          <%= show_cost_str %>
          <!-- span title="生活费:¥<%#=@month_cost.to_i%> <%#=buy_num_this_month%>台矿机费:¥<%#=mine_cost_this_date%>(每台¥<%#=mine_cost%>)"></span //-->
        <% end %>
      </td>
      <!-- 月末量 //-->
      <%
        # 若有输入卖币日期则卖币
        $mine_sell_dates.each_index do |i|
          sell_date = $mine_sell_dates[i].split(':')[0]
          sell_amount = $mine_sell_dates[i].split(':')[1].to_f
          # 如果到达卖币日期则卖币
          if sell_date == this_date.to_s(:db)
            @btc_total_amount -= sell_amount
            sell_mine_note = "\n卖币#{sell_amount}枚, 共¥#{(sell_amount*btc_to_cny(@btc_price)).to_i}元"
          end
        end
      %>
      <td align="right"><%= to_n(@btc_total_amount,4) %></td>
      <!-- 增减 //-->
      <% # 查看极客挖矿余额是否已经大于增减量
          btc_diff_goal = @btc_total_amount-begin_amount
          if btc_diff_flag
            btc_goal_diff = jike_balance+huobi_balance-btc_diff_goal
            reach_btc_diff_goal = true if btc_goal_diff > 0
          end
          # 显示附加讯息
          btc_diff_title = ''
          # 显示矿机购买讯息
          if buy_num_this_month > 0
            mine_cost_btc = mine_cost/btc_to_cny(@btc_price)
            btc_diff_title += "月末可存#{mine_earn_remain.floor(4)} - 购买矿机#{buy_num_this_month}台(#{mine_cost_btc.floor(6)*buy_num_this_month}) = #{(mine_earn_remain-mine_cost_btc).floor(6)} "
          end
          # 显示目标差距
          if btc_diff_flag
            btc_diff_title += "极客+火币:#{to_n(jike_balance+huobi_balance,8)} 相差:#{to_n(btc_goal_diff,8)}"
          end
      %>
      <td align="right"><%= to_n(@btc_total_amount-begin_amount,4) %></td>
      <!-- 增长 //-->
      <% month_grow_rate = btc_month_grow_rate*100 %>
      <td align="right"><%= to_n(month_grow_rate) %>%</td>
      <% @btc_price = @btc_price.to_f * (1+btc_month_grow_rate) %>
      <%
        #调整抵达最高价后比特币每月增长幅度
        prices_arr.each_index do |i|
          rate = prices_arr[i].split(':')[0].to_f
          max_price = prices_arr[i].split(':')[1].to_f
          if @btc_price >= max_price
            btc_month_grow_rate = rate
            prices_arr.delete_at(i)
          end
        end
      %>
      <!-- 月末价 //-->
      <% end_price = @btc_price %>
      <!--td align="right" class="balance_now" title="¥<%#=btc_to_cny(goal_price).to_i%>"><%#= to_n(goal_price,0) %></td//-->
      <!-- 月末值 //-->
      <%
        end_balance = cal_btc_capital
        end_balance_twd = btc_capital_twd
        end_balance_cny = (end_balance_twd*twd_to_cny).to_i
        balance_diff_cny = end_balance_cny - begin_balance_cny
        balance_diff_twd = end_balance_twd - begin_balance_twd
        # 按币别显示
        if $show_value_cur == 'TWD'
          show_end_balance = end_balance_twd
          show_balance_diff = balance_diff_twd
        else
          show_end_balance = end_balance_cny
          show_balance_diff = balance_diff_cny
        end
      %>
      <td align="right" class="end_balance"><%= show_end_balance %></td>
      <td align="right"><%= show_balance_diff %></td>
      <% if admin? %>
        <!-- 月末目标 //-->
        <%
          # 按币别显示
          if $show_value_cur == 'TWD'
            show_goal_balance = goal_balance
          else
            show_goal_balance = (goal_balance*twd_to_cny).to_i
          end
        %>
        <td class="balance_now" align="right"><%= show_goal_balance %></td>
        <!-- 目前值 //-->
        <% show_goal_diff_calss = @flow_assets_twd > goal_balance ? 'trial_goal_reach' : '' %>
        <%
          # 按币别显示
          if $show_value_cur == 'TWD'
            show_now_value = @flow_assets_twd.to_i
          else
            show_now_value = (@flow_assets_twd*twd_to_cny).to_i
          end
        %>
        <td align="right" class="<%#= show_goal_diff_calss %>"><%= show_now_value %></td>
        <!-- 距离目标 //-->
        <%
          # 按币别显示
          if $show_value_cur == 'TWD'
            show_diff_value = (@flow_assets_twd-goal_balance).to_i
          else
            show_diff_value = ((@flow_assets_twd-goal_balance)*twd_to_cny).to_i
          end
        %>
        <td align="right" class="<%= show_goal_diff_calss %>"><%= show_diff_value %></td>
        <%
        # 计算每周完成多少
        if show_diff_value < 0
          week_goal = (show_diff_value/4).abs
          day_goal = (show_diff_value/30).abs
        else
          week_goal = day_goal = 0
        end
        %>
        <td align="right"><%= week_goal %></td>
        <td align="right"><%= day_goal %></td>
      <% end %>
      <% # 如果有矿机收益 %>
      <% if show_mine_td %>
        <% total_end_balance_twd = end_balance_twd + mine_income_twd # 月末值+挖矿总收益 %>
        <% mine_earn_remain_cny = (mine_earn_remain*btc_to_cny(end_price)).to_i %>
        <% mine_earn_remain_twd = (mine_earn_remain_cny*cny_to_twd).to_i %>
        <!-- 当月挖矿 //-->
        <%
        # 每月的产币值
        mine_month_income_cny = (mine_earn*btc_to_cny(end_price)).to_i
        # 每月的产币值累加
        total_mine_sell += mine_month_income_cny
        # 按币别显示
        if $show_value_cur == 'TWD'
          show_mine_month_income = (mine_month_income_cny*@cny2twd).to_i
        else
          show_mine_month_income = mine_month_income_cny
        end
        %>
        <td align="right" title="月挖: <%= mine_earn.floor(4) %> 共挖: <%= mine_amount.floor(4) %> <%=show_br%>月末可存: <%=mine_earn_remain.floor(4)%>(¥<%=mine_earn_remain_cny%>|<%=mine_earn_remain_twd%>)"><%= show_mine_month_income %></td>
        <%  # 累计挖矿总收益
            mine_total_cny = (mine_amount*btc_to_cny(end_price)).to_i
            mine_total_twd = (mine_total_cny*@cny2twd).to_i %>
        <!-- 挖矿累计 //-->
        <!-- td align="right" title="฿<%#=mine_amount.floor(4)%>(NT$<%#= mine_total_twd %>)"><%#=mine_total_cny%></td //-->
        <!-- 储备余额 //-->
        <%
          # 查看是否为金如意还本年月
          if this_date.month == 12 and this_date.year%3 == 0
            jry_back = (jry_back_base*twd_to_cny).to_i
            fund_note += "金如意+¥#{jry_back} "
            # 如有贷款本金且可用币支付生活，则立即偿还
            if (trial_loan_sum_cny > 0) and (@btc_total_amount - month_sell > 0)
              # 偿清贷款
              if trial_loan_sum_cny - jry_back <= 0
                jry_back -= trial_loan_sum_cny
                fund_note += "还贷-¥#{trial_loan_sum_cny} "
                trial_loan_sum_cny = 0
                invest_remain_cny += jry_back+trial_loan_sum_cny # 还剩的+已打消的本金(加回可贷款余额)
              # 偿还部分贷款
              else
                trial_loan_sum_cny -= jry_back
                fund_note += "还贷-¥#{jry_back} "
                invest_remain_cny += jry_back # 已打消的本金(加回可贷款余额)
              end
            else
              invest_remain_cny += jry_back # 不还的话加入储备余额
            end
          end
          # 查看是否为一诺千金还本年月 如有贷款本金则尝试偿还
          if this_date.month == 10 and this_date.year >= 2030
            fund_note += "一诺千金+¥#{yn_back}"
            # 如有贷款本金且可用币支付生活，则立即偿还
            if (trial_loan_sum_cny > 0) and (@btc_total_amount - month_sell > 0)
              # 偿清贷款
              if trial_loan_sum_cny - yn_back <= 0
                yn_back -= trial_loan_sum_cny
                fund_note += "还贷-¥#{trial_loan_sum_cny} "
                trial_loan_sum_cny = 0
                invest_remain_cny += yn_back+trial_loan_sum_cny # 还剩的+已打消的本金(加回可贷款余额)
              # 偿还部分贷款
              else
                trial_loan_sum_cny -= yn_back
                fund_note += "还贷-¥#{yn_back} "
                invest_remain_cny += yn_back # 已打消的本金(加回可贷款余额)
              end
            else
              invest_remain_cny += yn_back # 不还的话加入储备余额
            end
            yn_back = (yn_back*yn_rate).to_i
          end
          # 查看是否需要以储备资产支付生活费(必须还有贷款余额)
          if this_date >= $trial_month_cost_start_date_admin and (@btc_total_amount <= 0 or !trial_cost_from_trezor)
            if trial_loan_sum_cny+@month_cost < loan_limit_cny
              invest_remain_cny -= @month_cost
              trial_loan_sum_cny += @month_cost
              fund_note += "贷款生活-¥#{@month_cost}"
              this_month_loan_cny += @month_cost
              is_pay_month_cost = true
            end
          end
          # 支付贷款利息
          if this_month_lixi_cny > 0
            # 以储备资金支付利息
            if (invest_remain_cny - this_month_lixi_cny > 0) and (trial_loan_sum_cny + this_month_lixi_cny < loan_limit_cny )
              invest_remain_cny -= this_month_lixi_cny
              trial_loan_sum_cny += this_month_lixi_cny
              fund_note += "贷款付息-¥#{this_month_lixi_cny}"
              this_month_loan_cny += this_month_lixi_cny
            # 以比特币支付利息
            elsif end_balance_cny - this_month_lixi_cny > 0
              lixi_eq_btc = this_month_lixi_cny/@usdt2cny/@btc_price
              @btc_total_amount -= lixi_eq_btc
              fund_note += "以币付息-฿#{lixi_eq_btc.floor(6)}"
            end
          end
          # 计算利息总额 实际已贷款的利息(目前先不计因每月都会执行贷款利息已在定投时扣去)+试算表贷款的利息
          total_lixi_cny = (trial_loan_sum_cny*trial_loan_rate).to_i
          invest_remain_cny = loan_limit_cny if invest_remain_cny > loan_limit_cny
          # 按币别显示 资产净值=币总值+储备总值-实际利息
          if $show_value_cur == 'TWD'
            show_invest_remain = (invest_remain_cny*cny_to_twd).to_i
            show_this_month_loan = (this_month_loan_cny*cny_to_twd).to_i
            show_loan = (trial_loan_sum_cny*cny_to_twd).to_i
            show_interest = (total_lixi_cny*cny_to_twd).to_i
            total_balance = ((end_balance_cny+invest_remain_cny-total_lixi_cny)*cny_to_twd).to_i
          else
            show_invest_remain = invest_remain_cny
            show_this_month_loan = this_month_loan_cny
            show_loan = trial_loan_sum_cny
            show_interest = total_lixi_cny
            total_balance = end_balance_cny+invest_remain_cny-total_lixi_cny
          end
          show_invest_remain = raw("<u>#{show_invest_remain}</u>") if trial_cost_from_fund
          # 是否开启以冷钱包支付生活费
          if (this_date > $trial_cost_from_trezor_start) and (@btc_total_amount - month_sell > 0)
            trial_cost_from_trezor = true
            trial_cost_from_fund = false
          elsif trial_cost_from_fund
            if trial_loan_sum_cny > loan_limit_cny # 不能再贷款了
              trial_cost_from_trezor = true
              trial_cost_from_fund = false
            end
          end
          # 确认是否已破产(这个月无法付出生活费)
          is_over_month_cost = true if !is_pay_month_cost
          # 储备值可生活月数
          invest_remain_months = ($loan_limit_cny-trial_loan_sum_cny).to_f/@month_cost if @month_cost > 0
          # 计算持仓比例
          hold_ratio = end_balance_cny.to_f/(end_balance_cny+$loan_limit_cny-trial_loan_sum_cny)*100
        %>
        <td align="right" title="<%=fund_note%>" class="end_balance"><%=show_invest_remain%></td>
        <td align="right"><%=show_this_month_loan%></td>
        <td align="right"><%=show_loan%></td>
        <td align="right"><%=hold_ratio.floor(1)%>%</td>
        <td align="right" class="end_balance"><%=show_interest%></td>
        <td align="right"><%=invest_remain_months.floor(1)%></td>
        <td class="end_balance" align="right"><%=total_balance%></td>
      <% end %>
    </tr>
    <%
      # 如果点击存入数据库，则存入相关数据
      if exe_save_trials_to_db == 'yes'
        TrialList.create(
          trial_date: this_date,
          begin_price: begin_price,
          begin_amount: begin_amount,
          month_cost: @month_cost,
          month_sell: month_sell,
          begin_balance: begin_balance,
          begin_balance_twd: begin_balance_twd,
          month_grow_rate: month_grow_rate,
          end_price: end_price,
          end_balance: end_balance,
          end_balance_twd: end_balance_twd,
          month_invest: this_month_invest_cny
        )
        switch_system_param('month_invest_load', 0, 1, false) if $month_invest_load == 0
      end
    %>
  <% end %>
  <tr class="thead">
    <td colspan="6" align="center">
      <% # 显示现价与k线图链接 %>
      <%= show_prices_and_chart_links %>
    </td>
    <td colspan="11" align="left">
      <% # 显示资产净值与走势图链接 %>
      <%= show_net_value_link if admin? %>
    </td>
    <% # 如果有矿机收益 %>
    <% if admin? %>
      <% if show_mine_td %>
        <td colspan="9" align="right">
      <% end %>
    <% else %>
      <% if show_mine_td %>
        <td colspan="7" align="right">
      <% end %>
    <% end %>
      <% if admin? %>
        <% # 将试算结果存入数据库 %>
        <%= link_to t(:save_trials_to_db), save_trials_to_db_path, { id: 'save_trials_to_db' } %> |
        <% # 显示所有数据 %>
        <%= link_to '显示所有数据', trial_lists_path(show_all:1) %>
      <% end %>
    </td>
  </tr>
</table>
